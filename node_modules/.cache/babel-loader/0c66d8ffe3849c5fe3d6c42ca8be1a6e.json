{"ast":null,"code":"import _classCallCheck from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageHelper from './ImageHelper';\nvar propTypes = {\n  // Rendered on success\n  children: PropTypes.element.isRequired,\n  // Rendered during load\n  loadingIndicator: PropTypes.node,\n  // Array of image urls to be preloaded\n  images: PropTypes.arrayOf(PropTypes.string),\n  // If set, the preloader will automatically show\n  // the children content after this amount of time\n  autoResolveDelay: PropTypes.number,\n  // Error callback. Is passed the error\n  onError: PropTypes.func,\n  // Success callback\n  onSuccess: PropTypes.func,\n  // Whether or not we should still show the content\n  // even if there is a preloading error\n  resolveOnError: PropTypes.bool,\n  // Whether or not we should mount the child content after\n  // images have finished loading (or after autoResolveDelay)\n  mountChildren: PropTypes.bool\n};\nvar defaultProps = {\n  loadingIndicator: null,\n  images: [],\n  autoResolveDelay: 0,\n  onError: null,\n  onSuccess: null,\n  resolveOnError: true,\n  mountChildren: true\n};\n\nvar Preload =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Preload, _React$Component);\n\n  function Preload() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Preload);\n\n    var _temp;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Preload)).call.apply(_getPrototypeOf2, [this].concat(args))), _this._mounted = false, _this.state = {\n      ready: false\n    }, _this.loadImages = function () {\n      var _this$props = _this.props,\n          images = _this$props.images,\n          autoResolveDelay = _this$props.autoResolveDelay;\n      ImageHelper.loadImages(images).then(_this._handleSuccess, _this._handleError);\n\n      if (autoResolveDelay && autoResolveDelay > 0) {\n        _this.autoResolveTimeout = setTimeout(_this._handleAutoResolve, autoResolveDelay);\n      }\n    }, _this._handleAutoResolve = function () {\n      _this._handleSuccess({\n        didAutoResolve: true\n      });\n    }, _this._handleSuccess = function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          didError = _ref.didError,\n          didAutoResolve = _ref.didAutoResolve;\n\n      if (_this.autoResolveTimeout) {\n        clearTimeout(_this.autoResolveTimeout);\n        _this.autoResolveTimeout = null;\n      }\n\n      var ready = _this.state.ready;\n\n      if (ready || !_this._mounted) {\n        return;\n      }\n\n      _this.setState({\n        ready: true\n      });\n\n      var onSuccess = _this.props.onSuccess;\n\n      if (onSuccess) {\n        onSuccess({\n          didError: didError,\n          didAutoResolve: didAutoResolve\n        });\n      }\n    }, _this._handleError = function (err) {\n      if (!_this._mounted) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          resolveOnError = _this$props2.resolveOnError,\n          onError = _this$props2.onError;\n\n      if (resolveOnError) {\n        _this._handleSuccess({\n          didError: true,\n          error: err\n        });\n      }\n\n      if (onError) {\n        onError(err);\n      }\n    }, _temp));\n  }\n\n  _createClass(Preload, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var images = this.props.images;\n\n      if (!images || images.length === 0) {\n        this._handleSuccess();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._mounted = true;\n      this.loadImages();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var images = this.props.images;\n      var oldImages = new Set(prevProps.images);\n      var hasChanged = false;\n\n      for (var i = 0; i < images.length; i += 1) {\n        var image = images[i];\n\n        if (!oldImages.has(image)) {\n          hasChanged = true;\n          break;\n        }\n      }\n\n      if (hasChanged) {\n        this.loadImages();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n\n      if (this.autoResolveTimeout) {\n        clearTimeout(this.autoResolveTimeout);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ready = this.state.ready;\n      var _this$props3 = this.props,\n          mountChildren = _this$props3.mountChildren,\n          children = _this$props3.children,\n          loadingIndicator = _this$props3.loadingIndicator;\n      return ready && mountChildren ? children : loadingIndicator;\n    }\n  }]);\n\n  return Preload;\n}(React.Component);\n\nPreload.propTypes = propTypes;\nPreload.defaultProps = defaultProps;\nexport default Preload;","map":null,"metadata":{},"sourceType":"module"}