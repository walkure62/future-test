{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Anastasia/Documents/frontend-javascript-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Anastasia/Documents/frontend-javascript-test/src/components/FetchData.js\";\nimport React, { Component } from 'react';\nimport { dataMin, data } from '../data';\n\nvar FetchData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FetchData, _Component);\n\n  function FetchData(type) {\n    var _this;\n\n    _classCallCheck(this, FetchData);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FetchData).call(this));\n    _this.state = {\n      data: [],\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(FetchData, [{\n    key: \"componentWillUpdate\",\n    value: function () {\n      var _componentWillUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var url;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  isLoading: true,\n                  error: null\n                });\n                if (this.props.urlType === 'data-min') url = dataMin;\n                if (this.state.type === 'data') url = data;\n                console.log(url);\n                fetch(url).then(function (response) {\n                  return response.json();\n                }).then(function (users) {\n                  var userData = users.map(function (data) {\n                    return React.createElement(\"tr\", {\n                      key: data.id,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 27\n                      },\n                      __self: this\n                    }, React.createElement(\"td\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 28\n                      },\n                      __self: this\n                    }, data.lastName), React.createElement(\"td\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 29\n                      },\n                      __self: this\n                    }, data.email), React.createElement(\"td\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 30\n                      },\n                      __self: this\n                    }, data.phone));\n                  });\n\n                  _this2.setState({\n                    isLoading: false\n                  });\n\n                  _this2.setState({\n                    data: userData\n                  });\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillUpdate() {\n        return _componentWillUpdate.apply(this, arguments);\n      }\n\n      return componentWillUpdate;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.data;\n    }\n  }]);\n\n  return FetchData;\n}(Component);\n\nexport default FetchData;","map":{"version":3,"sources":["/Users/Anastasia/Documents/frontend-javascript-test/src/components/FetchData.js"],"names":["React","Component","dataMin","data","FetchData","type","state","isLoading","setState","error","props","urlType","url","console","log","fetch","then","response","json","users","userData","map","id","lastName","email","phone"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,EAAiBC,IAAjB,QAA4B,SAA5B;;IAEMC,S;;;;;AACF,qBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACd;AACA,UAAKC,KAAL,GAAa;AACTH,MAAAA,IAAI,EAAE,EADG;AAETI,MAAAA,SAAS,EAAE;AAFF,KAAb;AAFc;AAMrB;;;;;;;;;;;;;;;AAGW,qBAAKC,QAAL,CAAc;AAAED,kBAAAA,SAAS,EAAE,IAAb;AAAmBE,kBAAAA,KAAK,EAAE;AAA1B,iBAAd;AAGA,oBAAI,KAAKC,KAAL,CAAWC,OAAX,KAAuB,UAA3B,EAAuCC,GAAG,GAAGV,OAAN;AACvC,oBAAI,KAAKI,KAAL,CAAWD,IAAX,KAAoB,MAAxB,EAAgCO,GAAG,GAAGT,IAAN;AAEhCU,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACJG,gBAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,QAAQ,EAAI;AACd,yBAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,iBAHD,EAGGF,IAHH,CAGQ,UAAAG,KAAK,EAAI;AACb,sBAAIC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAAlB,IAAI,EAAI;AAC7B,2BACI;AAAI,sBAAA,GAAG,EAAEA,IAAI,CAACmB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAKnB,IAAI,CAACoB,QAAV,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAKpB,IAAI,CAACqB,KAAV,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAKrB,IAAI,CAACsB,KAAV,CAHJ,CADJ;AAOH,mBARc,CAAf;;AASA,kBAAA,MAAI,CAACjB,QAAL,CAAc;AAAED,oBAAAA,SAAS,EAAE;AAAb,mBAAd;;AACA,kBAAA,MAAI,CAACC,QAAL,CAAc;AAACL,oBAAAA,IAAI,EAAEiB;AAAP,mBAAd;AACH,iBAfD;;;;;;;;;;;;;;;;;;6BAkBK;AACL,aACI,KAAKd,KAAL,CAAWH,IADf;AAGH;;;;EAvCmBF,S;;AA0CxB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport {dataMin, data} from '../data'\n\nclass FetchData extends Component {\n    constructor(type) {\n        super();\n        this.state = {\n            data: [],\n            isLoading: false\n        };\n}\n\n    async componentWillUpdate() {\n            this.setState({ isLoading: true, error: null })\n\n            let url;\n            if (this.props.urlType === 'data-min') url = dataMin\n            if (this.state.type === 'data') url = data\n            \n            console.log(url);\n        fetch(url)\n        .then(response => {\n            return response.json();\n        }).then(users => {\n            let userData = users.map(data => {\n                return(\n                    <tr key={data.id}>\n                        <td>{data.lastName}</td>\n                        <td>{data.email}</td>\n                        <td>{data.phone}</td>\n                    </tr>\n                )\n            })\n            this.setState({ isLoading: false })\n            this.setState({data: userData})\n        });\n\n    }\n    render() {\n        return (\n            this.state.data\n        )\n    }\n}\n\nexport default FetchData;"]},"metadata":{},"sourceType":"module"}